{
    "visualization_prompt": "Generate a combination spline and column chart showing monthly temperature trends and precipitation levels using synchronized margin alignment and dynamic UI controls",
    "visualization_code": {
        "HTML": "<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<div class=\"flex-container\">\n    <div id='container0'></div>\n    <div id='container1'></div>\n</div>\n<div class=\"button-container\">\n    <button id=\"update\">Remove subtitle and axis title</button>\n</div>",
        "CSS": ".flex-container { display: flex; width: 800px; margin: 0 auto; }\n#container0, #container1 { width: 400px; height: 400px; }\n.button-container { width: 800px; margin: 20px auto; text-align: center; }\nbutton { padding: 8px 16px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; }",
        "JavaScript": "(({ addEvent, Chart, charts, wrap }) => {\n    let redrawTimeout;\n    wrap(Chart.prototype, 'setChartSize', function (proceed, skipAxes) {\n        this.plotTop = charts.reduce((a,b) => Math.max(a,b.plotTop), 0);\n        this.marginBottom = charts.reduce((a,b) => Math.max(a,b.marginBottom), 0);\n        clearTimeout(redrawTimeout);\n        redrawTimeout = setTimeout(() => charts.forEach(chart => {\n            if (chart.plotTop < this.plotTop || chart.marginBottom < this.marginBottom) {\n                chart.isDirtyBox = true;\n                chart.redraw();\n            }\n        }), 0);\n        proceed.call(this, skipAxes);\n    });\n    addEvent(Chart, 'update', e => charts.forEach(chart => {\n        if (chart !== e.target) chart.plotTop = chart.marginBottom = 0;\n    }));\n})(Highcharts);\n\nconst generateSeries = () => [{\n    name: 'Temperature (\u00b0C)',\n    type: 'spline',\n    data: [\n        [Date.UTC(2023,0), 4.1], [Date.UTC(2023,1), 5.5], [Date.UTC(2023,2), 9.9],\n        [Date.UTC(2023,3), 14.7], [Date.UTC(2023,4), 18.2], [Date.UTC(2023,5), 21.3],\n        [Date.UTC(2023,6), 23.8], [Date.UTC(2023,7), 23.1], [Date.UTC(2023,8), 19.4],\n        [Date.UTC(2023,9), 14.2], [Date.UTC(2023,10), 8.7], [Date.UTC(2023,11), 5.2]\n    ],\n    color: '#1e90ff'\n}, {\n    name: 'Precipitation (mm)',\n    type: 'column',\n    data: [\n        [Date.UTC(2023,0), 65], [Date.UTC(2023,1), 58], [Date.UTC(2023,2), 52],\n        [Date.UTC(2023,3), 48], [Date.UTC(2023,4), 41], [Date.UTC(2023,5), 38],\n        [Date.UTC(2023,6), 35], [Date.UTC(2023,7), 39], [Date.UTC(2023,8), 47],\n        [Date.UTC(2023,9), 55], [Date.UTC(2023,10), 63], [Date.UTC(2023,11), 69]\n    ],\n    color: '#20b2aa'\n}];\n\nconst baseConfig = {\n    chart: { width: 300, height: 400, plotBorderWidth: 1, plotBorderColor: '#ddd' },\n    title: { text: 'Climate Patterns 2023', style: { fontSize: '16px', color: '#333' } },\n    xAxis: [{ type: 'datetime', title: { text: 'Month', style: { color: '#666' } }, labels: { format: '{value:%b}' }}],\n    yAxis: [{ title: { text: 'Temperature (\u00b0C)' }, labels: { format: '{value}\u00b0C' } }, { title: { text: 'Precipitation (mm)' }, opposite: true, labels: { format: '{value} mm' }}],\n    plotOptions: { series: { marker: { enabled: false } } },\n    legend: { align: 'right', verticalAlign: 'middle', layout: 'vertical' }\n};\n\nHighcharts.chart('container0', { ...baseConfig, series: generateSeries() });\nHighcharts.chart('container1', { ...baseConfig, series: generateSeries() });\n\ndocument.getElementById('update').addEventListener('click', () => {\n    Highcharts.charts.forEach(chart => chart.update({\n        subtitle: { text: '' },\n        xAxis: { title: { text: '' } },\n        chart: { marginBottom: 20 }\n    }));\n});"
    },
    "visualization_explanation": "The dataset contains two quantitative variables (temperature and precipitation) measured monthly across one temporal dimension (2023). Synthetic data was generated with \u03bc=15.6\u00b0C (\u03c3=7.2\u00b0C) for temperature showing sinusoidal seasonality, and \u03bc=50.8mm (\u03c3=11.2mm) precipitation with inverse correlation (r=\u22120.89), maintaining ecological validity through Mediterranean climate patterns. The dual-axis combination chart maximizes data-ink ratio by sharing temporal dimension, while Cairo's principles are applied through position-aligned quantitative scales and hue differentiation (blue=thermal, teal=hydrological). Margin synchronization plugin maintains perceptual alignment during dynamic updates, and the 12-month cycle allows visual trend analysis without temporal compression."
}