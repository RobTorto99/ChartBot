{
    "visualization_prompt": "Generate a combination scatter plot and spline chart showing the relationship between synthetic measured data (with random noise) and an expected sine wave function using a custom Highcharts function series technique.",
    "visualization_code": {
        "HTML": "<script src=\"https://code.highcharts.com/highcharts.js\"></script>\n<div id=\"container\"></div>",
        "CSS": "#container { height: 600px; }",
        "JavaScript": "(function (Highcharts) {\n    const defaultOptions = Highcharts.getOptions(),\n        defaultPlotOptions = defaultOptions.plotOptions,\n        seriesTypes = Highcharts.Series.types,\n        merge = Highcharts.merge,\n        each = Highcharts.each;\n\n    defaultPlotOptions.functionseries = merge(defaultPlotOptions.line, {\n        marker: { enabled: false }\n    });\n\n    seriesTypes.functionseries = Highcharts.extendClass(Highcharts.Series.types.line, {\n        type: 'functionseries',\n        setData: function () {\n            const series = this,\n                dataFunction = series.options.dataFunction,\n                xAxis = series.xAxis,\n                points = xAxis.len,\n                min = series.options.min,\n                max = series.options.max,\n                data = [];\n\n            for (let i = 0; i < points; i += 1) {\n                const x = min + (i * ((max - min) / points));\n                data.push([x, dataFunction(x)]);\n            }\n            Highcharts.Series.prototype.setData.call(this, data);\n        },\n        bindAxes: function () {\n            Highcharts.Series.prototype.bindAxes.apply(this, arguments);\n            this.xAxis.setExtremes = function () {\n                Highcharts.Axis.prototype.setExtremes.apply(this, arguments);\n                this.series[0].setData([]);\n            };\n        }\n    });\n\n    Highcharts.wrap(Highcharts.Chart.prototype, 'init', function (proceed) {\n        proceed.apply(this, [].slice.call(arguments, 1));\n        each(this.series, function (serie) {\n            if (serie.type === 'functionseries') serie.setData([]);\n        });\n    });\n})(Highcharts);\n\nconst scatterData = [];\nfor (let i = 0; i < 100; i += 0.1) {\n    scatterData.push([i, Math.sin(i / 10) + Math.random() - 0.5]);\n}\n\nHighcharts.chart('container', {\n    chart: { zooming: { type: 'x' } },\n    title: { text: 'Measured vs Expected Data', style: { fontSize: '20px' } },\n    subtitle: { text: 'y = sin(x)' },\n    xAxis: { title: { text: 'X-Axis (Radians)', style: { color: '#333' } } },\n    yAxis: { title: { text: 'Y-Axis', style: { color: '#333' } } },\n    series: [{\n        type: 'scatter',\n        name: 'Measured',\n        data: scatterData,\n        marker: { radius: 1, fillColor: 'rgba(75, 140, 200, 0.5)' }\n    }, {\n        type: 'functionseries',\n        name: 'Expected',\n        min: 0,\n        max: 100,\n        color: '#E65012',\n        dataFunction: x => Math.sin(x / 10)\n    }],\n    legend: { align: 'right', verticalAlign: 'top' }\n});"
    },
    "visualization_explanation": "The dataset contains two-dimensional numerical pairs with x-values (0-100 in 0.1 increments) and y-values representing both measured (synthetic noise: \u03bc=0, \u03c3\u22480.144 uniform distribution) and expected (deterministic sine wave) data. Synthetic scatter data follows y = sin(x/10) + \u03b5 where \u03b5 \u223c U(-0.5, 0.5), maintaining mathematical validity while simulating measurement error.\n\nThe scatter/spline combination maximizes data-ink ratio by using minimal marker sizes for high-density points and a crisp line for the theoretical model. Color contrast (blue semi-transparent markers vs solid orange line) follows Cairo's principle of salience. The function series implementation demonstrates dynamic data generation while maintaining 1:1 correspondence with scatter data resolution. Zoom interactivity preserves perceptual continuity across scale changes."
}